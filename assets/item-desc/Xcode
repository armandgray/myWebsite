Xcode

/*======== Introduction ========*/

What is Xcode: "Xcode 8 includes everything you need to create amazing apps for iPhone, iPad, Mac, Apple Watch, and Apple TV. This radically faster version of the IDE features new editor extensions that you can use to completely customize your coding experience. New runtime issues alert you to hidden bugs by pointing out memory leaks, and a new Memory Debugger dives deep into your object graph. Swift 3 includes more natural and consistent API naming, which you can experiment with in the new Swift Playgrounds app for iPad."

Services: iOS Development
Swift
Objective-C

Visit: https://developer.apple.com/xcode/
https://developer.apple.com/swift/

/*======== Getting Started ========*/

0. Go to https://developer.apple.com/download/ and download the newest version of Xcode 
Or download Xcode from the Mac App Store

- this is the Integrated Development Environment for iOS development. (You may have to sign in to an apple account).

1. Creating a Project
Enter Product Name = App Name
Organization Name is added to Bundle Identifier
Bundle Identifier = unique Package Name/ Identifier for app

-- The Interface --
2. Toolbar

Toolbar = Top Bar
Toolbar right - Left to right
Show 1 Code File | Show Mult | Show Mult
Toolbar right right:
Nav | Debug | Utils

3. Debug
- Debug Area - Toggle Bottom Left Button - Bottom of screen - Displays Errors and Console logs (Editor > Show Rendered/Raw Markup)

4. Navbar
Nav Bar (left to right):
Proj. Navigator | Simple | Search | Issue | ...
Main.Storyboard = UI file
Assets.xcassets = Assets file
Info.plist = App Settings

5. Source Editor

In the playground window:
- The main are is called the Source Editor where you type your code.

6. Utilities Inspector
= right bar
(left to right) File Inspector = info | Quick Help

7. Preferences
- Line Numbers --> Xcode > Preferences (Com ,) > Text Editing > Line Numbers

/*======== Structure ========*/

8. MVC - https://developer.apple.com/library/content/documentation/General/Conceptual/DevPedia-CocoaCore/MVC.html

Organizational model

MODEL - GETS UPDATED and NOTIFIES
The model represents the data. ie. context, name , address, number...

VIEW - GETS UPDATED and PASSES USER ACTION
The view is the visual aspect how is the model presented

CONTROLLER - UPDATES MODEL FROM USER ACTION && UPDATES VIEW FROM MODEL ON DATA CHANGE
The controller connects the model and view

"We keep these separated in the Model-View-Controller design pattern. The controller is the object that connects the view to the model."

"For example, we're looking at a user interface, for example, the context application, we see a list of contacts, and we tap on a contact name. That user action is then sent from the view to the controller. The controller again is that connection between the view and the model, so it then tells the model, hey, this was selected, give all the data for that contact. The model can then present that data. Now when you're looking at an individual contact, you can actually edit a phone number, for example, or edit their name or something else."

/*======== Projects ========*/

9. Select a Device, Run App, Enable Developer Mode (Optional: In Emulator - Window > Scale > 50%)

/*======== Layouts & Views ========*/

10. Modifying Layouts - Main.storyboard
== Design UI
Document Outline (Toggle Hide w/ bottom button):
> View Controller Scene > View == MVC View
> View Controller Scene > View Controller == MVC Controller == ViewController.swift

Library - Bottom Of Util Area
(Left to Right) File Template | Code Snippet | Object | Media

Add View: Library > Objects > ex: Label
--> Click and Drag into place
--> Dbl click label OR use Inspector (Top of Utils Area, index 3)

/*======== Dyncamically Modify Views = Controller ========*/

VIEWCONTROLLER.swift

Use Main.storyboard
Hide Nav bar, Document Outline, and Utils Panel
Click Assistant Editor in Top Right (Two Rings) - Shows storyboard and code file

Right-Click View in Storyboard and drag into Controller class ==> Define Connection > "Connect"

CREATES LINE:	@IBOutlet weak var label: UILabel!

Use new var to access view inside viewDidLoad() {
	super.viewDidLoad()
	myLabel.text = "Changed with Code!"
}

/*======== Action(Event Listeners) ========*/

Library > Objects > Button
Add connection to button into Controller with Assistant Editor

Change Outlet to Action on connection and provide method/ listener name in ViewController.class outside of any methods

CREATES LINE:	@IBAction func onButtonClick(_ sender: AnyObject) {}

/*======== View Connections ========*/

IB refers to a previous app called Interface Builder, but the code is now included in Xcode.

the ! means that the value is nonnull or in Swift immediately unwrap the optional (its poss for it to not have a value, but it will always have a value)

IBOutlet designates the variable as a UI object/outlet

View Connection can also be written directly into the ViewController code. To modify or create new connections: Main.storyboard > ViewController (or Yellow Icon) > UtilsPanel.Connection Inspector (index 5) > Click X or drag connections to views

EXAMPLE:

Text Field - Text: ""
Button - Text: "Say hi"
Label - Text: ""

@IBOutlet weak var myTextField: UITextField!
@IBOutlet weak var myLabel: UILabel!
@IBAction func onBtnTap(_ sender: AnyObject) {
	let name = myTextField.text! // normally.text returns optional, so use ! to unwrap the value
	myLabel.text = "Hi \(name)!"
}

/*======== First Responders ========*/

== Object responding to current event (eg. keyboard typing > TextField)

To hide keyboard we need to indicate that the TextField is no longer the first responder:

@IBAction func onBtnTap(_ sender: AnyObject) {
	let name = myTextField.text!
	myLabel.text = "Hi \(name)!"
	myTextField.resignFirstResponder() // hide keyboard
	// .becomeFirstResponder() show
}

override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
	view.endEditing(true) // call on View not TextField; this resigns all TextFields in View
}

/*======== Delegation ========*/

== one object delegates handling to another object

To handle delegate methods - declare subclass UITextFieldDelegate, set delegate:

class GameViewController: UIViewController, UITextFieldDelegate {

	/* Set the delegate dynamically below or use the Connections Inspector in Main.storyboard to connect delegate (drag to yellow icon)
	*/
	override func viewDidLoad() {
		super.viewDidLoad()
		myTextField.delegate = self
	}

	...

	func touchesBegan() {
		...
	}

	func textFieldShouldReturn(_ textField: UITextField) -> Bool {
		myTextField.resignFirstResponder()
		return false
	}
}

To change the text of the return key:
Main.storyboard > select TextField > Util.Attribute Inspector > (scroll) return key > Done...

/*======== Debugging View Connections ========*/

In gutter (behind line numbers) each View Connection should have a filled in Circle.

Main.storyboard > Connections Inspector hover over each connection to verify it is connected to the correct View
