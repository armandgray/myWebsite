Swift 3

/*======== Introduction ========*/

What is Swift 3: "Swift is a powerful and intuitive programming language for macOS, iOS, watchOS and tvOS. Writing Swift code is interactive and fun, the syntax is concise yet expressive, and Swift includes modern features developers love. Swift code is safe by design, yet also produces software that runs lightning-fast."

Services: Open Source
Refined API Naming
Playgrounds and REPL in Xcode
Objective-C Interoperability

Visit: https://developer.apple.com/swift/
https://developer.apple.com/xcode/
https://developer.apple.com/reference/swift

/*======== Xcode IDE ========*/

1. Creating a Project
Enter Product Name = App Name
Organization Name is added to Bundle Identifier
Bundle Identifier = unique Package Name/ Identifier for app

-- The Interface --
2. Toolbar

Toolbar = Top Bar
Toolbar right - Left to right
Show 1 Code File | Show Mult | Show Mult
Toolbar right right:
Nav | Debug | Utils

3. Debug
- Debug Area - Toggle Bottom Left Button - Bottom of screen - Displays Errors and Console logs (Editor > Show Rendered/Raw Markup)

4. Navbar
Nav Bar (left to right):
Proj. Navigator | Simple | Search | Issue | ...
Main.Storyboard = UI file
Assets.xcassets = Assets file
Info.plist = App Settings

5. Source Editor

In the playground window:
- The main are is called the Source Editor where you type your code.

6. Utilities Inspector
= right bar
(left to right) File Inspector = info | Quick Help

7. Preferences
- Line Numbers --> Xcode > Preferences (Com ,) > Text Editing > Line Numbers

8. Select a Device, Run App, Enable Developer Mode (Optional: In Emulator - Window > Scale > 50%)

9. MVC - https://developer.apple.com/library/content/documentation/General/Conceptual/DevPedia-CocoaCore/MVC.html

Organizational model

MODEL - GETS UPDATED and NOTIFIES
The model represents the data. ie. context, name , address, number...

VIEW - GETS UPDATED and PASSES USER ACTION
The view is the visual aspect how is the model presented

CONTROLLER - UPDATES MODEL FROM USER ACTION && UPDATES VIEW FROM MODEL ON DATA CHANGE
The controller connects the model and view

"We keep these separated in the Model-View-Controller design pattern. The controller is the object that connects the view to the model."

"For example, we're looking at a user interface, for example, the context application, we see a list of contacts, and we tap on a contact name. That user action is then sent from the view to the controller. The controller again is that connection between the view and the model, so it then tells the model, hey, this was selected, give all the data for that contact. The model can then present that data. Now when you're looking at an individual contact, you can actually edit a phone number, for example, or edit their name or something else."

/*======== Getting Started ========*/

var str = "Hello, playground"

var hello = "Hello"; var playground = "playground"

for i in 0..<64 {
    var point = sin(Double(i) * 100)
}

print(str)

// In the for loop hover over the result in the Side Bar and it displays to icons: Quick Look and Show Result. Both display a graph of the result (try right clicking the graph)


print(hello, playground) = hello, playground
print(hello, playground, separator: "_", terminator: "")

// Option Click on method = display quick help menu

To include a value in a printed String use \():

print("\(hello)" viewer!)
print("1 + 1 = \(1 + 1)")

func printLiteralExpressions() {
	print("Function: \(#function)")
	print("File: \(#file)")
	print("Line: \(#line)")
	print("Column: \(#column)")
}

printLiteralExpressions()

// Single-line comment

Top Right corner contains show hide panel buttons

Landmarks - // Mark: This is viewable in the jump bar
// TODO: Do This
// FIXME: Fix this
// MARK: - add a separator above this

/* A multi-line comment
	nested in a function
*/

//: Single 

/*********** 2. Literal expressions ***********/

func printLiteralExpressions() {
	print("Function: \(__FUNCTION__)") //prints this.function
	print("File: \(__FILE__)") //prints current file; not main playground file
	print("Line: \(__LINE__)")
	print("Column: \(__COLUMN__)")
}

/*********** 3. Rendered Markup ***********/

//: [Next](@next)  When in editor/render markup becomes a page jump button

//: [Previous](@previous) 

/*********** 4. Landmarks ***********/

// MARK: This is viewable in the jump bar
// MARK: - adds a separator above this text in the jump bar

// TODO: Do this
// FIXME: Fix this

/*********** 5. Delimeters ***********/

//: Single-line delimiter

/*: Text on this line not displayed in rendered markup          

Block delimiter

## Header 2
### Header 3

> "Block quote"

* Milk
* Bread
* Bananas

----

1. **Learn Swift**
2. Develop an awesome app
3. Retire

print("Hello, World")
*/

/*********** 6. Links & Images ***********/

//: [Swift blog](https://developer.apple.com/swift/)

//: [Swift logo] (http://seeklogo.com/swift-logo-252637.html#)

//: ![Betty](Betty.png "Betty")

/*********** 7. Vars & Constants ***********/

//Strongly Typed
var x: Int = 1
let y: String = "Hi" // constant

//Optionals
var n: Character = "a"?
print(n) // optional(n)\n
// Unboxed Optional

var m: Int!
m = 10
print(m) // 10

/*********** 8. Strings ***********/

let quote = "In the end, we only regre the chances we didnt take."

let shape = "circle"
let radius = 5.0 // double
let area = M_PI * radius * radius

print("The area of a \(shape) with a radius of \(radius) is \(area).")
// format specifiers
print(String(format:"The area of a %@ with a radius of %.0f is %.2f", shape, radius, area))

//Inspecting
quote.hasPrefix("In the end") // true
quote.hasSuffix("Abraham Lincoln") // false
quote.uppercaseString
quote.lowercaseString

quote.characters.count // 54
quote.startIndex // 0
quote.endIndex // 54

let firstCharacter = quote[quote.startIndex] // "I"
let secondCharacter = quote[quote.startIndex.successor()] //"n"
let fourthCharacter = quote[quote.startIndex.successor().successor().successor()]

let eighthIndex = quote.startIndex.advancedBy(7) // 7: index[type]
let eighthCharacter = quote[eighthIndex] // "e"

let lastCharacter = quote[quote.endIndex.predecessor()] // "."

// Inserting, Removing and Replacing

quote.insert("!", atIndex: quote.endIndex.predecessor())
quote.removeAtIndex(quote.endIndex.predecessor()) // "!" instead of "."

let aRange = 0..<3 //>// 0 to 3
let startIndex = quote.endIndex.advancedBy(-42) // 
let range = startIndex..<quote.endIndex //>

let replacementString = "it's not the years in your life that count. It's the life in your years. -- Abraham Lincoln"

quote.replaceRange(range, with: replacementString)

// Escape Characters

\n - new line (\r works, too)
\t - tab
\ - escape next character
\0 - null character

/*********** 9. Arrays ***********/

var threeStooges = ["Moe", "Larry", "Curly"]
var inningScores: [Int]
var testScores = [Double]()
var quizScores: Array<Double> = []
var quarterlyScores = Array<Double>()
var turnstileCounts = Array(count: 20, repeatedValue: 0)
var snowboarderScores = [Double](count: 4, repeatedValue: 10.0)

// arrays of mixed type using the type any
var arrayOfAny: [Any] = [1, 2.0, "three"]

var someString = "Some string"
var nilString: String? = nil
let arrayOfStrings = [nilString, someString] // array of optional strings

var optionalArrayOfStrings: [String]?
var optionalArrayOfOptionalStrings: [String?]?

// Inspecting & Accessing Arrays

threeStooges.count // 3
threeStooges.isEmpty // false
threeStooges.contains("Moe") true

let larry = threeStooges[1]
let twoStooges = threeStooges[0..<2].sort(>) //>// sort() gives ascending order, for descending order pass > opertator
let moe = threeStooges.first!

// Modifying Arrays

turnstileCounts[2] = 5
turnstileCounts[0] += 10

var fourStooges = threeStooges
fourStooges.append("Shemp")

let shemp = fourStooges.removeLast() // returns item removes; "Shemp"

fourStooges.insert(shemp, atIndex: 0)

var allStooges = fourStooges + ["Ted", "Emil"]
allStooges += ["Joe Besser", "Joe DeRita"]
allStooges.removeRange(4...5)
allStooges.sortInPlace()

// Nesting Arrays

var famousGroupsOfThree = [
	threeStooges,
	["Huey", "Dewey", "Louie"],
	["Athos", "Porthos", "Aramis"],
	["Jack", "Chrissy", "Jane"]
]

let threeMusketeers = famousGroupsOfThree[2]
let jack = famousGroupsOfThree[3][0]

famousGroupsOfThree[3][2] = "Janet"

print(famousGroupsOfThree.flatMap( { $0 } )) // flatens multi dim array to a single dim array

/*********** 10. Dictionaries ***********/

var stockPrices = ["AAPL": 110.37, "GOOG": 606.25, "MSFT": 43.5]

var birthYears: [String: Int] = [:]

var raceResults = Dictionary<Int, String>()

let tourDeFranceResults: [Int: String]
tourDeFranceResults = [
	1: "Chris Froome",
	2: "Nairo Quintana",
	3: "Alejandro Valverde"
]

// Inspecting & Accessing Dictionaries

var ages = Dictionary<String, Int>()
stockPrices.count // 3
ages.isEmpty // true
Array(stockPrices.keys) // new array unordered values
Array(stockPrices.values) // new array unordered values
let appleStockPrice = stockPrices["AAPL"]!

// Modifying Dictionaries

stockPrices["AMZN"] = 504.72
stockPrices["AAPL"] = 114.45
stockPrices["AMZN"] = nil //removes item from dict
stockPrices[removeAll()]
stockPrices["DMI"] = 17.25

let dunderMifflinStockPrice = stockPrices.removeValueForKey("DMI") // returns an optional as value of key removed

// Nesting Dictionaries

var bostonMarathonResults: [Int: [String: String]] = [
	1: [
		"name": "Desisa",
		"country": "ETH",
		"finishingTime": "2:09:17"
	]
]

// write a question mark after a subscript to append another subscript; called optional chaining
// keys are guaranteed a value in nested dictionaries so we use optionals and stop if the value does not exist
let firstPlaceName = bostonMarathonResults[1]?["name"] // "Desisa"

/*********** 11. Sets ***********/

// long hand syntax only
var teachers = Set<String>()
var staff: Set<String> = []
// type inference applies
// duplicates are removed in sets
var students: Set = ["Charlotte", "Laura", "Kayleigh", "Kayla", "Boz", "Jake", "Charlotte"]

// Inspecting & Comparing Sets

students.count
teachers.isEmpty

var arrayOfStudents = Array(students) // toArray method on sets
var schoolBusStudents: Set ["Kayleigh", "Kayla", "Boz"]

students.contains("Charlotte") // true
schoolBusStudents.isSubsetOf(students) // true
schoolBusStudents.isStrictSubsetOf(students) // true
students.isSupersetOf(schoolBusStudents) // true
students.isStrictSupersetOf(schoolBusStudents) // true
students.isDisjointWith(schoolBusStudents) // false

// Performing Set Operations

let campAttendees: Set = ["Charlotte", "Laura", "Lilli", "Carlee", "Nathan"]

print(students.intersect(campAttendees)) // ["Laura", "Charlotte"]
print(students.exclusiveOr(campAttendees)) // ["Kayleigh", "Charlee"]
print(students.union(campAttendees))
print(students.subtract(campAttendees))
print(students.subtract(campAttendees))

// Modifying Sets

students.insert("Bob")

//let bob = students.remove("Bob") -- Not correct

let indexOfBob = students.indexOf("Bob")
students.removeAtIndex(indexOfBob!)
students.unionInPlace(campAttendees)

// Nesting Sets

let stringSet1: Set = ["a", "b", "c"]
let stringSet2: Set = ["d", "e", "f"]
let integerSet: Set = [1, 2, 3]
let setOfStringSets: Set = [stringSet1, stringSet2]

/*********** 12. Tuples ***********/

let httpStatus200 = (200, "OK")
var numbers: (Int, Float, Double) = (1, 2.3, 3.4)
var httpStatus: (Int, String?)?

var playerScores: ([Int], firstName: String, lastName: String?)
playerScores = ([134_000, 128_500, 156_250], "Scott", "Gardner")

// Accessing, Decomposing & Nesting Tuples

let highScore = playerScores.0.maxElement()!
print("\(playerScores.firstName) achieved a high score of \(highScore).")

let (scores, firstName, lastName) = playerScores
let averageScore = scores.reduce(0, combine: +) / scores.count
print("\(firstName) achieved an average score of \(averageScore).")

let (httpStatusCode, _) = httpStatus200
var anotherScore = (100, (firstName: "Scott", lastName: "Gardner"))
let (theScore, name) = anotherScore

name.firstName

// Modifying Tuples

var anotherScore = (100, (firstName: "Scott", lastName: "Gardner"))
anotherScore.0 = 98
anotherScore.1.firstName = "Lori"

/*********** 13. Operators ***********/
