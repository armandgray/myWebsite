/*======== Introduction ========*/

What is HTML, CSS, JS: HTML, CSS & JS make up the trio that handles web application structure, design and behavior respectively. HTML is the standard markup language for creating Web pages. HTML stands for Hyper Text Markup Language. HTML describes the structure of Web pages using markup. HTML elements are the building blocks of HTML pages. HTML elements are represented by tags. HTML tags label pieces of content such as "heading", "paragraph", "table", and so on. Browsers do not display the HTML tags, but use them to render the content of the page

Services: 
Web App Dev

Visit: http://www.w3schools.com

/*======== Getting Started ========*/

HTML, CSS & JS can be written in any of your favorite text editors (e.g. TextEdit, SublimeText) with a .html extension.

<!DOCTYPE html>
<html>
<head>
	<title>Page Title</title>
</head>
<body>

	<h1>My First Heading</h1>
	<p>My first paragraph.</p>

</body>
</html>

The tag elements <h1> and <p> are "nested" inside of the <body> tag. HTML uses nested to create parent-child relationships between elements. In HTML nesting is indicated by indentation. There is another nested element left for you to identify.

/*======== TAGS ========*/

All tags indicate a specific HTML element of a certain type and must be designated with opening (ie: < >) AND a closing tag (ie: </ >) in lowercase.

TAG EXPLANATION
The <!DOCTYPE html> declaration defines this document to be HTML5
The <html> element is the root element of an HTML page
The <head> element contains meta information about the document
The <title> element specifies a title for the document
The <body> element contains the visible page content
The <h1> element and the other h2, h3, h4... elements define headers of decreasing importance.
The <p> element defines a paragraph
The <a> element defines a link
The <img> element defines a img
The <nav> element defines a navigation bar
The <button> element defines a button

/*======== Attributes ========*/

All HTML elements can have attributes.
Attributes provide additional information about an element.
Attributes are always specified in the start tag.
Attributes usually come in name/value pairs like: name="value"
Attributes should be lower case and their values should be in quotes.

Possible Attributes
<html lang="en-US"> - The language is declared with the lang attribute.
<p title="I'm a tooltip">- The value of the title attribute will be displayed as a tooltip when you mouse over the paragraph.

Common Attributes

<a href="http://www.w3schools.com">This is a link</a> - HTML links are ALWAYS defined with the <a> tag. The link address is specified in the href attribute.

<img src="w3schools.jpg" width="104" height="142"> - The filepath of the source (src), and the size of the image (width and height) are all provided as attributes.

/*======== Styles ========*/

Setting the style of an HTML element, can be done with the style attribute.

<p style="property:value;"> - The property is a CSS property. The value is a CSS value.

<body style="background-color:powderblue;"> - The background-color property defines the background color for the element.

<body style="color:powderblue;">The color property defines the text color for an HTML element.

<body style="font-family:courier;"> - The font-family property defines the font to be used for an HTML element.

<body style="font-size:courier;"> - The font-size property defines the text size to be used for an HTML element.

<body style="text-align:center;"> - The text-align property defines the horizontal alignment to be used for an HTML element.

The styling of html is better used with CSS.

/*======== Introduction ========*/

What is CSS: CSS stands for Cascading Style Sheets.

CSS describes how HTML elements are to be displayed on screen, paper, or in other media.

CSS saves a lot of work. It can control the layout of multiple web pages all at once.



Services: 
Web App Design

Visit: http://www.w3schools.com

/*======== Getting Started ========*/

Styling HTML with CSS

CSS can be added to HTML elements in 3 ways:

Inline - by using the style attribute in HTML elements as seen above.
Internal - by using a <style> element in the <head> section:

<!DOCTYPE html>
<html>
<head>
<style>
body {background-color: powderblue;}
h1   {color: blue;}
p    {color: red;}
</style>
</head>
<body>

<h1>This is a heading</h1>
<p>This is a paragraph.</p>

</body>
</html>

External - by using an external CSS file
The most common way to add CSS, is to keep the styles in separate CSS files. However, here we will use inline and internal styling, because this is easier to demonstrate, and easier for you to try it yourself:

<!DOCTYPE html>
<html>
<head>
  <link rel="stylesheet" href="styles.css">
</head>
<body>

<h1>This is a heading</h1>
<p>This is a paragraph.</p>

</body>
</html>

styles.css:
body {
    background-color: powderblue;
}
h1 {
    color: blue;
}
p {
    color: red;
}

/*======== Basic Styling ========*/

The CSS color property defines the text color to be used.

The CSS font-family property defines the font to be used.

The CSS font-size property defines the text size to be used.

h1 {
    color: blue;
    font-family: verdana;
    font-size: 300%;
}
p  {
    color: red;
    font-family: courier;
    font-size: 160%;
}

The CSS border property defines a border around an HTML element.

The CSS padding property defines a padding (space) between the text and the border.

The CSS margin property defines a margin (space) outside the border. A margin on each side can be specified individually for more control (in the order top, right, bottom, left):

p {
    border: 1px solid powderblue;
    padding: 30px;
    margin: 50px
}

body {
	margin: 10px 0px 5px 50px;
}

To define a specific style for one special element, add an id attribute to the element:

<p id="p01">I am different</p>

then define a style for the element with the specific id:

#p01 {
    color: blue;
}

The class Attribute

To define a style for a special type of elements, add a class attribute to the element:

<p class="error">I am different</p>

then define a style for the elements with the specific class:

p.error {
    color: red;
}

/*======== Introduction ========*/

What is Javascript: JavaScript makes HTML pages more dynamic and interactive. JavaScript is the programming language of HTML and the Web. JavaScript is easy to learn and controls the behavior of web applications.

Services: 
Web App Behavior

Visit: http://www.w3schools.com
https://www.javascript.com/

/*======== Getting Started ========*/

The <script> tag is used to define a client-side script (JavaScript).

The <script> element either contains scripting statements, or it points to an external script file through the src attribute.

Common uses for JavaScript are image manipulation, form validation, and dynamic changes of content.

To select an HTML element, JavaScript very often use the document.getElementById(id) method.

This JavaScript example writes "Hello JavaScript!" into an HTML element with id="demo":

<script>
document.getElementById("demo").innerHTML = "Hello JavaScript!";
</script>

/*======== The DOM (Document Object Model) ========*/

Our scripts will be attached to a web page, and it's the web page that comes first. They bring our script with them, not the other way around. So our page, whether a simple page or a complex one, is the canvas that we're painting on. It's the environment we're affecting. It is the world that we live in. And we must be able to reach from a JavaScript into these pages and cause these pages to reach back into our script.

We do that by understanding the DOM, the Document Object Model. I consider knowing your way around the DOM to be the single most important skill for a JavaScript programmer to develop. But this is a term that's often a little tough to understand the first time you hear it, because it's kind of vague. People ask well, what is the DOM? Is it a language, is it part of JavaScript? What is it? Then you look it up on the web, and you find phrases like, "The Document Object Model is an application programming interface that defines logical structure of well-formed an XML and HTML documents," and it really doesn't help most people, but it's quite a simple idea at heart.

So let's take the DOM piece by piece. Well, what do I mean by document? Well, if I am in Microsoft Word, that might mean one thing, but we're not. For us, the document simply means the page, not the site, the web page; the web page is the document. But this document can be represented in different ways. Well, it already is. You know this already. After all, which one of these is the web page? Well, both of them. One is the browser view, one is the source code.

It's the same document.

The DOM is simply a way to understand and manipulate HTML elements. Here we use the DOM for Javascript.

/*======== Javascript Basics ========*/

// grab single element
var myTitleLink = document.getElementById("mainTitle");

// information about the node
console.log("This is a node of type: ", myTitleLink.nodeType);
console.log("Inner HTML: ", myTitleLink.innerHTML);
console.log("Child nodes: ", myTitleLink.childNodes.length);

// how many links?
var myLinks = document.getElementsByTagName("a");
console.log("Links: ", myLinks.length);



// here are some extra examples of combining these:

// First, grab a div called "homeNav"
var navItems = document.getElementById("homeNav");

// get information about that node
console.log("This is a node of type: ", navItems.nodeType);
console.log("Inner HTML: ", navItems.innerHTML);
console.log("Child nodes: ", navItems.childNodes.length);

// how many ordered lists?
var orderedLists = document.getElementsByTagName("ol");
console.log("Ordered lists: ", orderedLists.length);

// narrowing down the links further - use another element, not the whole document.
var myLinks = navItems.getElementsByTagName("a");
console.log("Links in navItems: ", myLinks.length);

// or even combined
var x = document.getElementById("mainNav").getElementsByTagName("a");
console.log("Links in mainNav: ", x.length);

/*======== Javascript Structure and Events ========*/

window.onload = function() {
	prep anything we need to
	prepareEventHandlers();
};

document.onclick = function() {
	alert("You clicked somewhere in the document");
};

function prepareEventHandlers() {	
	var myImage = document.getElementById("mainImage");
	myImage.onclick =  function() {
		alert("You clicked the image");
	}
}

/*======================================================*/

var emailField = document.getElementById("email");

emailField.onfocus = function() {
	if ( emailField.value == "your email") {
		emailField.value = "";
	}
};

emailField.onblur = function() {
	if ( emailField.value == "") {
		emailField.value = "your email";
	}
};

/*======================================================*/

// Two methods for timers - setTimeout and SetInterval (single / repeating)

function simpleMessage() {
	alert("This is just an alert box");
}

// settimeout is in milliseconds
//setTimeout(simpleMessage,5000);

var myImage = document.getElementById("mainImage");

var imageArray = ["_images/overlook.jpg","_images/winery_sign.jpg","_images/lunch.jpg",
				  "_images/bigSur.jpg","_images/flag_photo.jpg","_images/mission_look.jpg"];
var imageIndex = 0;

function changeImage() {
	myImage.setAttribute("src",imageArray[imageIndex]);
	imageIndex++;
	if (imageIndex >= imageArray.length) {
		imageIndex = 0;
	}
}

// setInterval is also in milliseconds
var intervalHandle = setInterval(changeImage,5000);

myImage.onclick =  function() {
	clearInterval(intervalHandle);
};

/*======================================================*/
/*======== Parallax Effect ========*/

What is the Parallax Effect: Parallax scrolling is the special technique used with graphics and animation to simulate motion with background images moving at a differing rate than the foreground images.

Many web sites have been featured in both tutorial examples and "Best of" lists highlighting those which utilize parallax scrolling. The methods typically involve combinations of HTML5, CSS3, graphics design, jQuery, and JavaScript to power the parallax scrolling effects.

/*======== HTML ========*/

<body>
	<nav></nav>
	<div class="section section1"></div>
	<div class="sub-section"></div>
	<div class="section section2"></div>
	<div class="sub-section"></div>
	<div class="section section3"></div>
</body>

/*======== CSS ========*/

html, body {
	background-color: none;
	height: 100%;
	margin: 0;
}

h1, h2, h3, h4, h5, h6, p {
	margin-bottom: 20px;
}

nav {
	height: 50px;
	width: 100%;
	height: 50%;
	background-color: rgba(0, 0, 0, 0.5);
	z-index: 1000;
}

.section {
	height: 100%;
	background-size: cover; /*cover available area*/
	background-repeat: no-repeat; /*for smaller img that dont cover*/
	background-attachment: fixed; /*fix the backgrounds and let divs scroll over*/
}

.sub-section{
	height: 50%;
	background-color: bisque;
}

.section1 {
	background-image: url("background1.jpg"); /*must use back-img*/
}

.section2 {
	background-image: url("background2.jpg");
}

.section3 {
	background-image: url("background3.jpg");
}
